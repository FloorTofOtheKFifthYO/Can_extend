1.系统+串口初始化
USART U5  	PC12 PD2

2.CAN初始化
	void can_rcc_config();
	void can_gpio_config();
	void can_nvic_config();
	int can_init();

CAN1: CAN_RX PA11 , CAN_TX PA12
CAN2: CAN_RX PB12 , CAN_TX PB13
	
3.接收相关
	void msg_rcv_func(CanRxMsg can_rx_msg).
	int can_add_callback(u8 can_id,void *msg_rcv_callback_func);
	
typedef struct
{
  uint32_t StdId;  /*!< Specifies the standard identifier.
                        This parameter can be a value between 0 to 0x7FF. */

  uint32_t ExtId;  /*!< Specifies the extended identifier.
                        This parameter can be a value between 0 to 0x1FFFFFFF. */

  uint8_t IDE;     /*!< Specifies the type of identifier for the message that 
                        will be received. This parameter can be a value of 
                        @ref CAN_identifier_type */

  uint8_t RTR;     /*!< Specifies the type of frame for the received message.
                        This parameter can be a value of 
                        @ref CAN_remote_transmission_request */

  uint8_t DLC;     /*!< Specifies the length of the frame that will be received.
                        This parameter can be a value between 0 to 8 */

  uint8_t Data[8]; /*!< Contains the data to be received. It ranges from 0 to 
                        0xFF. */

  uint8_t FMI;     /*!< Specifies the index of the filter the message stored in 
                        the mailbox passes through. This parameter can be a 
                        value between 0 to 0xFF */
} CanRxMsg;

4.发送
	int can_send_msg(u8 can_id,u8 *msg,u8 len);
	
	
	
	
5.提高
    设备号 <=X=> StdId     StdId 仅表示优先级 0xFF
	每个设备都可以收发，MCU的过滤器应该设置为 0x00000000 ，接收所有报文。
	Id多用于多个芯片通信时，外设主要还是发送而不是接收数据
	
	设备号以及对应的数据用链表存储
	
	数据分片  总长 8 Byte   MBUF 5000
	传送过程可能会被更高优先级打断，需要先缓存以标识符区分。
	(当单个字节的数据会被分裂时需要设置偏移，但此处似乎不需要考虑)
	0             n                64
	|     XXXX    |     Data       |
        n位标识 (n<64) tag_len  奇数发送完成，偶数未完成
		数据长度 Data_len =64-lag_len-1;
		tag_len=4 时  
		offset_L=(tag_len+1)%4
		offset_R=4-offset_L
		发送时
		tmp[i]|=(msg[j]&(0xF>>offset_R))<<offset_R
		tmp[i+1]|=(msg[j]&(1<<offset_L))
		接收时
		
	typedef struct{
        //can_id;         //not used
		void (*msg_rcv_callback)(uint64_t device,CanRxMsg *can_rx_msg); <-- 全部接受完成后调用
		链表(device,u8 msg[MBUF];  <-- 缓存0x0D结尾)
	}can_callback_struct;
	
////以上的内容留待以后实现///////////////////////////////////////////////////////////////////////////
   
    StdId 负责标识功能
	Device 负责标识设备 (1Byte)
	Data (7Byte)
	
	typedef struct{
		void (*msg_rcv_callback)(uint64_t device,CanRxMsg *can_rx_msg); <-- 接受完成后调用
		can_msg* head;  <-- 缓存0x0D结尾)
	}can_callback_struct;
	
	typedef struct{
	    u8 decvice_id;
		int len;
		u8 msg[MaxBUFF];
	}can_msg;